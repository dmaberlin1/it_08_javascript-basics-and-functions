/**
 * Напишите функцию union(a, b) возвращающую упорядоченный по возрастанию массив
 * состоящий из чисел встречающихся в обоих наборах.
 *
 * Пример:
 *
 * union([1, 1, 3, 2, 5], [5, 3, 7, 7]) === [3, 5]
 * union([2, 4, 6, 8, 10, 12, 10, 8, 6, 4, 2], [3, 6, 9, 12, 15, 18]) === [6, 12]
 * union([1, 2, 3], [11, 0, -1]) === []
 *
 * @param {number[]} a
 * @param {number[]} b
 * @returns {number[]}
 */
function union(a, b) {
   const setA=new Set(a); //Создаем множество из массива a
   const setB=new Set(b); //Создаем множество из массива b
   const intersection=[]; //хранение пересечений


   for(const num of setA){
        if(setB.has(num)) intersection.push(num); // Добавляем число в пересечение, если оно присутствует и в setB
   }

   return intersection.sort((x,y)=>x-y); // Возвращаем пересечение, упорядоченное по возрастанию
    // Если результат отрицателен, то x будет расположено перед y в отсортированном массиве. Если результат положителен, то x будет расположено после y.
    // Если результат равен нулю, то порядок элементов не меняется.

}

module.exports = union;
